#include <bits/stdc++.h>
using namespace std;
#define FASTIO cin.tie(nullptr)->sync_with_stdio(false)

int N, L, a[200][100], ans = 0;

void preprocess() {
    cin >> N >> L;
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            cin >> a[i][j];
        }
    }
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            a[N + i][j] = a[j][i];
        }
    }
}

void simulate() {
    for (int i = 0; i < N * 2; ++i) {
        int flat = 1;   // j지점에서 유효한 평지갯수
        bool ok = true; // 길을 끝까지 지나가면 true

        for (int j = 0; j < N - 1; ++j) {
            if (a[i][j] == a[i][j + 1])                       // 평지이면
                ++flat;                                       // 내리막일 때 사용한 평지값을 +1
            else if (a[i][j] + 1 == a[i][j + 1] && flat >= L) // 오르막 발견
                flat = 1;
            else if (a[i][j] - 1 == a[i][j + 1] && flat >= 0) // 내리막 발견
                flat = 1 - L;                                 // 앞의 평지를 미리 쓴다.
            else {
                ok = false;
                break;
            }
        }
        if (ok && flat >= 0) ++ans;
    }
}

int main() {
    FASTIO;
    preprocess();
    simulate();
    cout << ans;
    return 0;
}

/*
1. 문제 읽기
2. 논리적 순서
3. 필요한 자료연산 리스트업
4. 자료형, 시간복잡도, 유리한 자료구조 선택
5. 구현
6. 엣지케이스

1. N*N grid가 있음. 각 칸마다 높이 있음
지나갈수 있는 길: 한 행, 열에 대해서 끝-끝으로 갈 수 있는지 여부
길을 지나가려면 길에 속한 모든 칸의 높이가 같거나, 경사로를 놓아야됨
경사로: 높이1, 길이가 L, 여러개 놓을 수 있음.
***경사로 놓는 조건***
1. 낮은칸에서 L개의 연속된 칸의 바닥이 닿아야됨
2. 낮은칸 높은칸 높이차이 1이여야 되고 그 이상은 안됨
3. 경사로 겹치면 안됨
4. 경사로가 블록 범위 넘어가면 안됨

2. 전체 길은 2N개, 그 중에 지나갈수있는길 찾기
N <= 100, (가로길N + 세로길N) * (하나의 길에 대해서 지나갈수있는지 여부 로직)
- 지나갈 수 있는지 여부 로직 - 배열 하나로 쫙 펴서 이걸 체크
- 1. 경사로 안 놓고 지나갈수 있는지
- 1-1. 만약 못지나가면 경사로를 놓고 지나갈 수 있는지 체크
- 경사로를 놓는 로직? 경사로는 1*L의 경사로를 여러개 놓을 수 있음
- 1<=L<=N이니까 1부터 N 길이의 경사로를 놓을 수 있는지 검사하는 로직을 쓰자
- ex) 1번블록 높이가 1, 5번블록 높이가 2일때 1~4에 올라가는 경사로를 놓을 수 있음
- L 범위에 경사로을 놓을 수 있는 조건들에 대해서 검사하는 방식으로 짜보자
- 어떻게 검사하나?
=> 치명적인 실수 - L값을 동적으로 계산하려고 했는데 문제 상에서는 L값이 주어진다

2. 평지 갯수 상태값을 1로 시작하고, 이를 경사로를 둘 때마다 1-L로 리셋, 다음 지형 검사할 때 오르막, 내리막일 때
변경
- 고려할 때의 기준점 - curr 지점과 경사로의 오른쪽 끝지점. 여기서부터 왼쪽으로 둘 수 있는지 여부
- 오르막이면 그다음 칸부터 사용할 수 있는 평지 갯수는 1개로 다시 시작. 기준점으로부터 L칸의 평지가 있어야됨
- 내리막이면 1-L로 시작. 이 때 평지카운트가 0보다 커야됨. 0보다 작으면 아직 경사로가 안 끝난 지점인 것임.
- 평지이면 사용할 수 있는 평지 갯수가 +1개 추가
*/
import sys
si = sys.stdin.readline
MOD = 1000000

s = si().rstrip()
a = [0] * 5001
d = [0] * 5001

for i in range(1, len(s) + 1):
    a[i] = ord(s[i - 1]) - ord('0')

d[0] = 1
for i in range(1, len(s) + 1):
    if 1 <= a[i] <= 9:
        d[i] = (d[i - 1] + d[i]) % MOD

    tmp = a[i - 1] * 10 + a[i]
    if 10 <= tmp <= 26:
        d[i] = (d[i - 2] + d[i]) % MOD

print(d[len(s)])

'''
1. 문제 읽기
2. 논리적 순서
3. 필요한 자료연산 리스트업
4. 자료형, 시간복잡도, 유리한 자료구조 선택
5. 구현
6. 엣지케이스

1. A-1 B-2 ... Z-26으로 암호화, 어떤 단어를 암호화했을 때 해석이 몇가지 나올수 있는지 경우의 수 출력
25114 -> 6개
11 1111 1111 -> 89개
len 5천 이하
MOD로 나눠서 출력, 해석못하면 0

2. d[i] = 인덱스 i까지 읽었을 때 나올 수 있는 단어 경우의 수
d[i]
= d[i - 1] + d[i], a[i] 1~9 일때
= d[i - 2] + d[i], i가 첫번째 단어가 아니고, a[i - 1] * 10 + a[i]가 10~26
'''
